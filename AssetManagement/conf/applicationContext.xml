<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-2.5.xsd">
    <context:annotation-config />

    <context:component-scan base-package="com.augmentum.ams" />
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <bean id="configBean"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
          <list>
            <value>classpath:database.properties</value>
			<value>classpath:ams.properties</value>
          </list>
		</property>
    </bean>

    <!-- Hibernate -->
    <bean id="dataSource" destroy-method="close"
        class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${dbcp.maxActive}" />
        <property name="initialSize" value="${dbcp.initialSize}" />
        <property name="maxWait" value="${dbcp.maxWait}" />
        <property name="logAbandoned" value="${dbcp.logAbandoned}" />
        <property name="testOnBorrow" value="${dbcp.testOnBorrow}" />
        <property name="testOnReturn" value="${dbcp.testOnReturn}" />
        <property name="testWhileIdle" value="${dbcp.testWhileIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="${dbcp.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${dbcp.minEvictableIdleTimeMillis}" />
        <property name="minIdle" value="${dbcp.minIdle}" />
        <property name="validationQuery" value="select NOW()"/>
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
	            <prop key="hibernate.show_sql">true</prop>
	            <prop key="hibernate.format_sql">true</prop>
	            <prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.search.default.directory_provider">${hibernate_search.FSDirectory}
                </prop>
                <prop key="hibernate.search.default.indexBase">${hibernate_search.index}
                </prop>
                <prop key="hibernate.search.default.analyzer">${hibernate_search.analyzer}
                </prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.augmentum.ams.model</value>
            </list>
        </property>
    </bean>

    <bean id="txManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true"  />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut expression="execution(* com.augmentum.ams.service..*.*(..))"
            id="pointCut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
    </aop:config>
	
	<bean id="authorityFilter" class="com.augmentum.ams.filter.AuthorityFilter" />
    <bean id="amsRealm" class="com.augmentum.ams.shiro.AmsRealm" />
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="amsRealm"></property>
    </bean>
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"></property>
        <property name="loginUrl" value="/error/error"></property>
        <property name="unauthorizedUrl" value="/home/error"></property>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="authorityFilter" />
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /error/error = anon
                /css/**=anon
                /js/**=anon
                /images/**=anon
                /**=authc
                /asset/listAsset/** = authc,perms[Asset:view_all]
                /asset/assignAsset/** = authc,perms[Asset:assign_asset]
                /asset/checkInAsset/** = authc,perms[Asset:check_in_asset]
                /asset/checkOutAsset/** = authc,perms[Asset:check_put_asset]
				/asset/createAsset/** = authc,perms[Asset:create]
				/asset/checkInventory/** = authc,perms[Asset:check_inventory]
				/asset/importAssets/** = authc,perms[Asset:import_asset]
				/tansferLog/** = authc,perms[TransferLog:*]
				/operationLog/** = authc,perms[OperationLog:*]
				/user/** = authc,perms[User:*]
                
            </value>
        </property>
    </bean>
    
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>